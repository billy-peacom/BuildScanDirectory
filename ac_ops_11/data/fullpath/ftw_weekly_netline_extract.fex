-* File: ftw_weekly_netline_extract.fex
-*Procedure by Pranav Dobhal AC044640 Started at 1/14/2013 9:47:57 AM
-* Modified by Konstantin Koton AC048724, 2015-12-02 (Migrated to WF8)
-* Refactored by Konstantin Koton AC048724, 2019-02-13 (FEX run time reduction from ~2hrs to ~2mins)


-*INCLUDE IBFS:/WFC/Repository/SOC/Production/Supporting_Files/common_dates_ibi.fex
-*-INCLUDE IBFS:/EDA/EDASERVE/Operations_Analytics/procedures/common_dates_ibi.fex
-INCLUDE IBFS:/EDA/EDASERVE/ops_analytics/procedures/common_dates_ibi.fex

SET TITLELINE = SKIP
SET DROPBLNKLINE = ON
SET NODATA = ''
SET HOLDLIST = PRINTONLY

-SET &STR_DT = AYMD(&LD_DT, 1, 'I8YYMD');
-SET &END_DT = AYMD(&LD_DT, 32, 'I8YYMD');

-*-SET &END_DT = &STR_DT;
-*-TYPE &TOD

ENGINE SQLORA SET DEFAULT_CONNECTION netline
SQL SQLORA PREPARE SQLOUT FOR
SELECT a.LEG_NO as LEG_NO
,A.FN_CARRIER
,A.FN_NUMBER AS FLIGHT_NUMBER
,(A.DAY_OF_ORIGIN + A.LDO_OFFSET) AS LOCAL_DATE
,CAST(A.DEP_AP_SCHED AS CHAR(3)) AS DEP_AP_SCHED
,A.DEP_SCHED_DT AS SCHED_DEP_DATE_UTC
,CAST(A.ARR_AP_SCHED AS CHAR(3)) AS ARR_AP_SCHED
,A.ARR_AP_SCHED AS WAB_BAG_REGION
,A.ARR_SCHED_DT AS SCHED_ARR_DATE_UTC
,(DECODE(B.PAX_F, NULL, 0, B.PAX_F) + DECODE(B.PAX_Y, NULL, 0, B.PAX_Y) + DECODE(B.PAX_C, NULL, 0, B.PAX_C)) AS ACT_PAX_BOOKED_COUNT
,A.AC_REGISTRATION
,COALESCE((CASE
	WHEN A.AC_REGISTRATION LIKE '%XX%'
		THEN '0'
	WHEN A.AC_REGISTRATION LIKE '%V%'
		THEN '0'
		ELSE SUBSTR(A.AC_REGISTRATION, 3, LENGTH(A.AC_REGISTRATION) - 2)
END), '0') AS ACFT_REGS_CDE
,A.AC_SUBTYPE
,A.LEG_STATE
,CAST(TRIM(leading 'J' from REGEXP_SUBSTR(
    SUBSTR(A.AC_VERSION, 1, LENGTH(A.AC_VERSION) - 3),
    '([J])([[:digit:]]{1,})', 1, 1)) AS INT) AS AIRCRAFT_SEAT_CAPACITY_TOTAL_J
,CAST(TRIM(leading 'W' from REGEXP_SUBSTR(
    SUBSTR(A.AC_VERSION, 1, LENGTH(A.AC_VERSION) - 3),
    '([W])([[:digit:]]{1,})', 1, 1)) AS INT) AS AIRCRAFT_SEAT_CAPACITY_TOTAL_W
,CAST(TRIM(leading 'Y' from REGEXP_SUBSTR(
    SUBSTR(A.AC_VERSION, 1, LENGTH(A.AC_VERSION) - 3),
    '([Y])([[:digit:]]{1,})', 1, 1)) AS INT) AS AIRCRAFT_SEAT_CAPACITY_TOTAL_Y


,CAST(CASE
    WHEN A.LEG_STATE IN ('ARR','DEP','DIV','OUT','ON') AND
         A.ARR_AP_SCHED = A.ARR_AP_ACTUAL
      THEN
        CAST(
          COALESCE(
            REGEXP_SUBSTR(
              SUBSTR(A.AC_VERSION, 1, LENGTH(A.AC_VERSION) - 3),
              '[[:digit:]]{1,}', 1, 1), '0') AS INT) +
        CAST(
          COALESCE(
            REGEXP_SUBSTR(
              SUBSTR(A.AC_VERSION, 1, LENGTH(A.AC_VERSION) - 3),
              '[[:digit:]]{1,}', 1, 2), '0') AS INT) +
        CAST(
          COALESCE(
            REGEXP_SUBSTR(
              SUBSTR(A.AC_VERSION, 1, LENGTH(A.AC_VERSION) - 3),
              '[[:digit:]]{1,}', 1, 3), '0') AS INT)
    ELSE NULL
  END AS INT) AS AIRCRAFT_SEAT_CAPACITY_TOTAL

, CAST(CASE WHEN a.ARR_AP_SCHED in ('SYD') THEN 'AUSTRALIA'
	 WHEN a.ARR_AP_SCHED in ('BOG','CCS','EZE','GRU','LIM','MEX','SCL') THEN 'SOUTH AMERICA'
	 WHEN a.ARR_AP_SCHED in ('DEL','HKG','ICN','KIX','NGO','NRT','PEK','PVG','SEL','SIN') THEN 'ASIA'
	 ELSE 'DEFAULT' END AS NVARCHAR2(20)) PAX_WT_REGION

,(CASE
	WHEN ((ORIG.COUNTRY_CODE = 'CA') AND (DEST.COUNTRY_CODE = 'CA')) THEN 'DOM'
	WHEN ((ORIG.COUNTRY_CODE = 'CA') AND (DEST.COUNTRY_CODE = 'US')) THEN 'TB'
	WHEN ((ORIG.COUNTRY_CODE = 'US') AND (DEST.COUNTRY_CODE = 'CA')) THEN 'TB'
	ELSE 'INT'
END) AS SECTOR

FROM SCHEDOPS.LEG A
LEFT JOIN SCHEDOPS.LEG_PAX B
	ON (A.LEG_NO = B.LEG_NO)
		AND (B.USAGE = 'B')
LEFT JOIN SCHEDOPS.AIRPORT ORIG
	ON (A.DEP_AP_SCHED = ORIG.IATA_AP_CODE)
		AND (A.DAY_OF_ORIGIN BETWEEN ORIG.VALID_SINCE AND ORIG.VALID_UNTIL)
		AND (ORIG.OPERATING_CARRIER = 'XXX')
LEFT JOIN SCHEDOPS.AIRPORT DEST
	ON (A.ARR_AP_SCHED = DEST.IATA_AP_CODE)
		AND (A.DAY_OF_ORIGIN BETWEEN DEST.VALID_SINCE AND DEST.VALID_UNTIL)
		AND (DEST.OPERATING_CARRIER = 'XXX')

WHERE (A.WHAT_IF = '_')
	AND (A.LEG_TYPE <> 'Y')
	AND (A.LEG_STATE NOT IN ('DEL', 'INC', 'RTR'))
	AND (A.FN_CARRIER IN ('AC', 'ZX', 'QK'))
	AND (A.DAY_OF_ORIGIN BETWEEN TO_DATE('&LD_DT', 'YYYYMMDD') AND TO_DATE('&END_DT', 'YYYYMMDD'))
END

DEFINE FILE SQLOUT
	FLIGHT_ORIG_LCL_DTE/YYMD = HDATE(LOCAL_DATE, 'YYMD');
END
TABLE FILE SQLOUT
PRINT
	FLIGHT_ORIG_LCL_DTE
	LEG_NO
	FN_CARRIER/A3
	FLIGHT_NUMBER/I6
	DEP_AP_SCHED/A3
	ARR_AP_SCHED/A3
	SECTOR
	AC_REGISTRATION
	ACFT_REGS_CDE/A10
	AC_SUBTYPE/A3
	SCHED_DEP_DATE_UTC
	SCHED_ARR_DATE_UTC
	ACT_PAX_BOOKED_COUNT
	AIRCRAFT_SEAT_CAPACITY_TOTAL
	AIRCRAFT_SEAT_CAPACITY_TOTAL_J
	AIRCRAFT_SEAT_CAPACITY_TOTAL_W
	AIRCRAFT_SEAT_CAPACITY_TOTAL_Y
	PAX_WT_REGION
	WAB_BAG_REGION
	COMPUTE JOIN_KEY/A20V = DEP_AP_SCHED || ARR_AP_SCHED;

ON TABLE HOLD AS ALL_FLIGHTS_HOLD FORMAT XFOCUS INDEX JOIN_KEY PAX_WT_REGION WAB_BAG_REGION AC_SUBTYPE ACFT_REGS_CDE
END

TABLE FILE FTW_ESTMTD_BAGS
PRINT
	DEP_STN
	ARR_STN
	BAG_PAX_RATIO
	BAG_WEIGHT
	EFFECTIVE_START_DT
	EFFECTIVE_END_DT
	COMPUTE JOIN_KEY/A20V = DEP_STN || ARR_STN;

ON TABLE HOLD AS FTW_ESTMTD_BAGS_HOLD FORMAT XFOCUS INDEX JOIN_KEY
END

TABLE FILE FTW_WAB_PAX_WTS
PRINT
	COMPUTE WT_REGION/A40V = REGION;
	A_WEIGHT
	M_WEIGHT
	F_WEIGHT
	C_WEIGHT
	I_WEIGHT
	EFFECTIVE_START_DT
	EFFECTIVE_END_DT

ON TABLE HOLD AS FTW_WAB_PAX_WTS_HOLD FORMAT XFOCUS INDEX WT_REGION
END

TABLE FILE FTW_WAB_BAG_WTS
PRINT
	COMPUTE BAG_REGION/A3V = REGION;
	BAG_WEIGHT
	EFFECTIVE_START_DT
	EFFECTIVE_END_DT

ON TABLE HOLD AS FTW_WAB_BAG_WTS_HOLD FORMAT XFOCUS INDEX BAG_REGION
END

TABLE FILE FTW_AIRCRAFT_INFO
PRINT
	ACFT_SUBTYPE_CDE
	ACFT_REGS_CDE
	BAG_CAPACITY
	ALLWD_WT_EST
	ULD_TYPE
	ULD_CAPACITY
	BAG_PER_ULD
	ULD_WT
	EFFECTIVE_START_DT
	EFFECTIVE_END_DT

ON TABLE HOLD AS FTW_AIRCRAFT_INFO_HOLD FORMAT XFOCUS INDEX ACFT_SUBTYPE_CDE ACFT_REGS_CDE
END
-RUN

JOIN CLEAR *
JOIN LEFT_OUTER
	JOIN_KEY IN ALL_FLIGHTS_HOLD TO MULTIPLE
	JOIN_KEY IN FTW_ESTMTD_BAGS_HOLD TAG J0 AS J0
END

JOIN LEFT_OUTER
	PAX_WT_REGION IN ALL_FLIGHTS_HOLD TO MULTIPLE
	WT_REGION IN FTW_WAB_PAX_WTS_HOLD TAG J1 AS J1
END

JOIN LEFT_OUTER
	WAB_BAG_REGION IN ALL_FLIGHTS_HOLD TO MULTIPLE
	BAG_REGION IN FTW_WAB_BAG_WTS_HOLD TAG J4 AS J4
END

-*JOIN LEFT_OUTER
-*	ACFT_REGS_CDE IN ALL_FLIGHTS_HOLD TO MULTIPLE
-*	ACFT_REGS_CDE IN FTW_AIRCRAFT_INFO_HOLD TAG J3 AS J3
-*END

JOIN LEFT_OUTER
	FILE ALL_FLIGHTS_HOLD AT AC_SUBTYPE TO MULTIPLE
	FILE FTW_AIRCRAFT_INFO_HOLD AT ACFT_SUBTYPE_CDE TAG J2 AS J2
	WHERE (ALL_FLIGHTS_HOLD.AC_SUBTYPE EQ J2.ACFT_SUBTYPE_CDE) AND (ALL_FLIGHTS_HOLD.ACFT_REGS_CDE EQ J2.ACFT_REGS_CDE);
END

JOIN LEFT_OUTER
	FILE ALL_FLIGHTS_HOLD AT AC_SUBTYPE TO MULTIPLE
	FILE FTW_AIRCRAFT_INFO_HOLD AT ACFT_SUBTYPE_CDE TAG J10 AS J10
	WHERE (ALL_FLIGHTS_HOLD.AC_SUBTYPE EQ J10.ACFT_SUBTYPE_CDE) AND (J10.ACFT_REGS_CDE EQ '0');
END

APP HOLD &&HOLD_OPS
TABLE FILE ALL_FLIGHTS_HOLD
PRINT
	FLIGHT_ORIG_LCL_DTE AS 'LOCAL_DATE'
	LEG_NO
	FN_CARRIER
	FLIGHT_NUMBER
	DEP_AP_SCHED
	ARR_AP_SCHED
	SECTOR
	AC_REGISTRATION
-*	ACFT_REGS_CDE
	COMPUTE ACFT_REGS_CDE/A10 MISSING ON   = IF ((J2.ACFT_REGS_CDE EQ '0') OR (J2.ACFT_REGS_CDE IS MISSING)) THEN J10.ACFT_REGS_CDE ELSE J2.ACFT_REGS_CDE;
-*	AC_SUBTYPE
	COMPUTE AC_SUBTYPE/A3 MISSING ON = IF (J2.ACFT_SUBTYPE_CDE IS MISSING) THEN J10.ACFT_SUBTYPE_CDE ELSE J2.ACFT_SUBTYPE_CDE;
	SCHED_DEP_DATE_UTC
	SCHED_ARR_DATE_UTC
	ACT_PAX_BOOKED_COUNT
	AIRCRAFT_SEAT_CAPACITY_TOTAL
	AIRCRAFT_SEAT_CAPACITY_TOTAL_J
	AIRCRAFT_SEAT_CAPACITY_TOTAL_W
	AIRCRAFT_SEAT_CAPACITY_TOTAL_Y
	PAX_WT_REGION
-*	WAB_BAG_REGION

	COMPUTE EST_BAG_DEP/A3 = IF (J0.DEP_STN EQ MISSING) THEN 'ZZ1' ELSE J0.DEP_STN;
	COMPUTE EST_BAG_ARR/A3 = IF (J0.ARR_STN EQ MISSING) THEN 'ZZ2' ELSE J0.ARR_STN;
	J0.BAG_PAX_RATIO
	J0.BAG_WEIGHT

	J1.A_WEIGHT
	J1.M_WEIGHT
	J1.F_WEIGHT
	J1.C_WEIGHT
	J1.I_WEIGHT

	COMPUTE WAB_BAG_REGION/A50V = IF (J4.BAG_REGION EQ MISSING) THEN SECTOR ELSE J4.BAG_REGION;
	J4.BAG_WEIGHT

-*	J3.BAG_CAPACITY
-*	J3.ALLWD_WT_EST
-*	J3.ULD_TYPE
-*	J3.ULD_CAPACITY
-*	J3.BAG_PER_ULD
-*	J3.ULD_WT
	 COMPUTE BAG_CAPACITY/I10 MISSING ON    = IF (J2.BAG_CAPACITY IS MISSING) THEN J10.BAG_CAPACITY ELSE J2.BAG_CAPACITY;
     COMPUTE ALLWD_WT_EST/I10 MISSING ON    = IF (J2.ALLWD_WT_EST IS MISSING) THEN J10.ALLWD_WT_EST ELSE J2.ALLWD_WT_EST;
     COMPUTE ULD_TYPE/A10 MISSING ON        = IF (J2.ULD_TYPE IS MISSING) THEN J10.ULD_TYPE ELSE J2.ULD_TYPE;
     COMPUTE ULD_CAPACITY/I10 MISSING ON    = IF (J2.ULD_CAPACITY IS MISSING) THEN J10.ULD_CAPACITY ELSE J2.ULD_CAPACITY;
     COMPUTE BAG_PER_ULD/I10 MISSING ON     = IF (J2.BAG_PER_ULD IS MISSING) THEN J10.BAG_PER_ULD ELSE J2.BAG_PER_ULD;
     COMPUTE ULD_WT/D10.2 MISSING ON        = IF (J2.ULD_WT IS MISSING) THEN J10.ULD_WT ELSE J2.ULD_WT;


ON TABLE HOLD AS FTW_NETLINE_EXTRACT FORMAT XFOCUS INDEX LEG_NO
END
APP HOLD
